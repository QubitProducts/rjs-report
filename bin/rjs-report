#!/usr/bin/env node

var path = require('path');
var program = require('commander');
var version = require('../package.json').version;
var rr = require('../index');
var printer = require('../lib/printer');

var defaultMinSize = 40 * 1024;

program
  .version(version)
  .option('-d, --dir [path]', 'The r.js optimization output dir (should contain the build.txt file)', '.');

program
  .command('summary')
  .description('report size of each bundle and large duplicates')
  .option('-s, --min-size [bytes]', 'minimum size of duplicates to be reported', defaultMinSize)
  .action(function (cmd) {
    printer.duplicates(rr.duplicates(root(), cmd), cmd);
    printer.bundles(rr.bundles(root(), cmd), cmd);
  });

program
  .command('duplicates')
  .description('list modules found in multiple bundles')
  .option('-s, --min-size [bytes]', 'minimum size of duplicates to be reported', defaultMinSize)
  .action(function (cmd) {
    printer.duplicates(rr.duplicates(root(), cmd), cmd);
  });

program
  .command('modules')
  .description('list and filter modules')
  .option('-p, --plain', 'a list of paths with no size information')
  .option('-b, --bundle [name]', 'filter by bundle')
  .option('-g, --grep [name]', 'filter by name')
  .option('-s, --min-size [bytes]', 'filter by min size', defaultMinSize)
  .option('-G, --no-grouping', 'don\'t group by bundle')
  .action(function (cmd) {
    printer.modules(rr.modules(root(), cmd), cmd);
  });

program
  .command('bundles')
  .description('list bundles')
  .option('-p, --plain', 'a list of paths with no size information')
  .action(function (cmd) {
    printer.bundles(rr.bundles(root(), cmd), cmd);
  });

program.parse(process.argv);

if (!program.args.length) {
  program.help();
}

function root() {
  var root = path.resolve(process.cwd(), program.dir);
  if (!rr.validRoot(root)) {
    console.log('build.txt not found in the build output directory', root);
    process.exit(1);
  }
  return root;
}